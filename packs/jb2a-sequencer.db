{"name":"Vortex","type":"script","author":"BEL3Iav6K058rvXZ","img":"modules/JB2A_DnD5e/Library/Generic/Template/Circle/Vortex_01_Regular_Blue_Thumb.webp","scope":"global","command":"//THIS MACRO IS INTENDED FOR THE VORTEX CIRCLE TEMPLATE with Intro/Loop/Outro. \n\n//TO USE THIS MACRO, you'll need Wasp's module called \"Sequencer\"\n//You can find its documentation here on Github : https://github.com/fantasycalendar/FoundryVTT-Sequencer\n//There is also a wiki with a lot more info if you want to dive into it : https://github.com/fantasycalendar/FoundryVTT-Sequencer/wiki\n\n//You can use the \" Show Sequencer Database\" Tool in the toolbar of Foundry to preview all our available Vortex color variations.\n//Thanks to the module Sequencer, you'll also be able to copy the path of the asset you want in a single click and replace it here to customize the macro.\n\n//You need to select a token before using the macro.\n\nlet selectedTokens = canvas.tokens.controlled;\nlet effectScale = 0.5;\nlet tokenSize;\n\nfor(let selectedToken of selectedTokens){\n\n    tokenSize = (selectedToken.data.width + selectedToken.data.height) /2;\n\n    new Sequence()\n    //Will play the intro sequence of a blue vortex animation.\n        .effect()\n            .file(\"jb2a.template_circle.vortex.intro.blue\") //Edit this line to customize the intro animation as follow : jb2a.template_circle.vortexvortex.intro.color\n            .scale(effectScale * tokenSize)\n            .atLocation(selectedToken)\n            .belowTokens() \n            .waitUntilFinished(-1000)\n    //Then it will transition to the loop sequence of a blue vortex animation.\n        .effect()\n            .file(\"jb2a.template_circle.vortex.loop.blue\") //Edit this line to customize the loop animation as follow : jb2a.template_circle.vortexvortex.loop.color\n            .scale(effectScale * tokenSize)\n            .atLocation(selectedToken)\n            .belowTokens()\n            .fadeIn(500)\n            .fadeOut(500)\n            .waitUntilFinished(-1000)\n    //Finally it will play the outro sequence of a blue vortex animation as follow : jb2a.template_circle.vortexvortex.outro.color\n        .effect()\n            .file(\"jb2a.template_circle.vortex.outro.blue\") //Edit this line to customize the outro animation.\n            .scale(effectScale * tokenSize)\n            .atLocation(selectedToken)\n            .belowTokens() \n\n        .play()\n}","folder":null,"sort":0,"permission":{"BEL3Iav6K058rvXZ":3},"flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.e3oACqy4EALxW2N9"}},"_id":"0A7GsVcYO7oJ5s22"}
{"name":"Melee Attack with Impact VFX","type":"script","author":"u7AwIDe7bKx1FJ7L","img":"modules/JB2A_DnD5e/Library/Generic/Impact/GroundCrackImpact_01_Regular_Orange_Thumb.webp","scope":"global","command":"//You'll need the module Sequence from Wasp to be Able to use this macro.\n//https://github.com/fantasycalendar/FoundryVTT-Sequencer\n\n//You can use the \" Show Sequencer Database\" Tool in the toolbar of Foundry to preview all our available melee attack animations.\n//Thanks to the module Sequencer, you'll also be able to copy the path of the asset you want in a single click and replace it here to customize the macro.\n\n//This macro is for Melee Attack only.\n//It adds a Ground crack impact as soon as the animation of the Maul hits the target.\n\nlet target = Array.from(game.user.targets)[0];\n\nlet sequence = new Sequence()\n\n    .effect()\n //Choose your melee attack animation and replace \"jb2a.maul.melee.white\" by a file path or a database name from the Sequencer DataBase Macro.\n        .file(\"jb2a.maul.melee.standard.white\")\n        .atLocation(canvas.tokens.controlled[0])\n        .stretchTo(target)\n        .waitUntilFinished(-1100)\n//This is a delay before the VFX added to the melee attack begins. The value is in milliseconds, modify it as you wish. This delay is specifically with this melee attack.\n    .effect()\n //Choose your desired VFX and replace \"jb2a.impact.ground_crack.orange\" by a file path or a database name from the Sequencer DataBase Macro.\n        .file(\"jb2a.impact.ground_crack.orange\")\n        .atLocation(target)\n        .scale(0.5)\n        .belowTokens()\n    .play();","folder":null,"sort":0,"permission":{"BEL3Iav6K058rvXZ":3,"u7AwIDe7bKx1FJ7L":3},"flags":{"core":{"sourceId":"Macro.DYvyPibMnhfujaNc"}},"_id":"416d4EMYJkvKBIm0"}
{"name":"Icosahedron","type":"script","author":"BEL3Iav6K058rvXZ","img":"modules/JB2A_DnD5e/Library/Generic/Energy/IcosahedronStarAbove_01_Regular_BlueYellow_Thumb.webp","scope":"global","command":"let effectScale = 0.35; // this serves as a multiplier for the size of the effect.\nlet effectFade = 250;\nlet tokenSize; // here, we define this variable that we will calculate inside the following loop, for each selected token\n//In this loop, we'll apply the effect on each token targeted.\nfor (let target of Array.from(game.user.targets)){\n    tokenSize = (target.data.width + target.data.height) /2;  \n    new Sequence() \n        .effect()\n            .attachTo(target)        \n            .file(`jb2a.icosahedron.star.below.blueyellow`)\n            .belowTokens()//by default, the effect would be played above the tokens, we want this one to be played underneath so we can place the overlay above it\n            .scale(effectScale * tokenSize)\n            .fadeIn(effectFade, {ease: \"easeOutCubic\"})\n            .persist()//This will make it contiously loop until dismissed by another macro (see below) or by pressing the Sequencer Effects Viewer button.\n            .name(\"Iscosahedron-stars\")//Could be anything. This name will make it easier to delete it via macro (see commented macro below)\n        .effect()\n            .attachTo(target)\n            .file(`jb2a.icosahedron.star.above.blueyellow`)\n            .scale(effectScale * tokenSize)\n            .fadeIn(effectFade, {ease: \"easeOutCubic\"})\n            .persist()\n            .name(\"Icosahedron-stars\")//Named it the same so we can dismiss both at the same time if needed, via macro. See below\n          .play();\n}\n      //The text below is commented out. You can copy and paste it in another macro to dismiss the animation. Don't forget to remove the two forward slashes to uncomment it !\n\n      // Sequencer.EffectManager.endEffects({name: \"Icosahedron-stars\"})","folder":null,"sort":0,"permission":{"BEL3Iav6K058rvXZ":3},"flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.td0FSeUvPTLRf3aP"}},"_id":"4PTLjC4A3S3UlwY2"}
{"name":"Magic Circle","type":"script","author":"BEL3Iav6K058rvXZ","img":"modules/JB2A_DnD5e/Library/Generic/Magic_Signs/EvocationCircleIntro_02_Regular_Red_Thumb.webp","scope":"global","command":"//THIS MACRO IS INTENDED FOR MAGIC CIRCLES with Intro/Loop/Outro. \n\n//TO USE THIS MACRO, you'll need Wasp's module called \"Sequencer\"\n//You can find its documentation here on Github : https://github.com/fantasycalendar/FoundryVTT-Sequencer\n//There is also a wiki with a lot more info if you want to dive into it : https://github.com/fantasycalendar/FoundryVTT-Sequencer/wiki\n\n//You can use the \"Show Sequencer Database\" Tool in the toolbar of Foundry to preview all our available magic circles animations.\n//Thanks to the module Sequencer, you'll also be able to copy the path of the asset you want in a single click and replace it here to customize the macro.\n\n//You need to select a token before using the macro.\n\nlet selectedTokens = canvas.tokens.controlled;\nlet effectScale = 0.25;\nlet tokenSize;\nfor(let selectedToken of selectedTokens){\n    tokenSize = (selectedToken.data.width + selectedToken.data.height) /2;\nnew Sequence()\n//Will play the intro sequence of the red evocation magic circle animation.\n    .effect()\n        .file(\"jb2a.magic_signs.circle.02.evocation.intro.red\") //Edit this line to customize the intro animation as follow : jb2a.magic_signs.circle.02.schoolofmagicname.intro.color\n        .scale(effectScale * tokenSize)\n        .atLocation(selectedToken)\n        .belowTokens() \n        .waitUntilFinished(-550)\n//Then it will transition to the loop sequence of the red evocation magic circle animation.\n    .effect()\n        .file(\"jb2a.magic_signs.circle.02.evocation.loop.red\") //Edit this line to customize the loop animation as follow : jb2a.magic_signs.circle.02.schoolofmagicname.loop.color\n        .scale(effectScale * tokenSize)\n        .atLocation(selectedToken)\n        .belowTokens() \n        .fadeIn(200)\n        .fadeOut(200)\n        .waitUntilFinished(-550)\n//Finally it will play the outro sequence of the red evocation magic circle animation as follow : jb2a.magic_signs.circle.02.schoolofmagicname.outro.color\n    .effect()\n        .file(\"jb2a.magic_signs.circle.02.evocation.outro.red\") //Edit this line to customize the outro animation.\n        .scale(effectScale * tokenSize)\n        .atLocation(selectedToken)\n        .belowTokens() \n    .play()\n}","folder":null,"sort":0,"permission":{"BEL3Iav6K058rvXZ":3},"flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.e3oACqy4EALxW2N9"}},"_id":"59QD8R6jX5whsSEg"}
{"name":"Flask Throw","type":"script","author":"57wlqmR4nbpd6oQC","img":"modules/JB2A_DnD5e/Library/Generic/Weapon_Attacks/Ranged/ThrowFlask01_01_Regular_Orange_Thumb.webp","scope":"global","command":"/*\n####################################################\n   This macro needs the Sequencer module to work.\n####################################################\n*/\n\n// Let's create a function with arguments. That means that we can call this function later and define each argument (here they're called dbThrow, dbFracture and dbExplosion);\n// If you look at the end of the macro, we're using each arg to call a specific Database path. (i.e: await grenade('dbPath01', 'dbPath02', 'dbPath03'))\nasync function grenade(dbThrow, dbFracture, dbSideExplosion, dbFumes, dbExplosion ){\n    let source = token; // this is the first selected token\n    let targets = Array.from(game.user.targets); // This is an array that will contain all targeted tokens (we need at least one to know where to throw the potion or grenade)\n        for(let target of targets){ // The for loop will iterate for each target, if more than one token is targeted. Otherwise it will run it only once\n        new Sequence()\n        .effect() \n            .file(dbThrow)\n            .atLocation(source)\n            .stretchTo(target)\n            .waitUntilFinished(-150)\n        .effect()\n            .file(dbFracture)\n            .atLocation(target)\n            .scale(0.5)\n            .offset({x:-100, y:0}) // Our side impacts usually start at 100 pixels from the left\n            .rotateTowards(source) // we rotate it so it points back towards the token throwing the potion and add a 180 degrees rotation to it\n            .rotate(180)\n        .effect()\n            .file(dbSideExplosion)\n            .atLocation(target)\n            .scale(0.65)\n            .randomizeMirrorY()\n            .offset({x:-100, y:0}) // Our side impacts usually start at 100 pixels from the left\n            .rotateTowards(source) // we rotate it so it points back towards the token throwing the potion and add a 180 degrees rotation to it\n            .rotate(180)\n            .tint(\"#FF9E17\") //Tints the assets with a orange colour in hexadecimal code\n        .effect()\n            .file(dbFumes)\n            .atLocation(target)\n            .scale(0.5)\n            .randomizeMirrorY()\n            .offset({x:-100, y:0}) // Our side impacts usually start at 100 pixels from the left\n            .rotateTowards(source) // we rotate it so it points back towards the token throwing the potion and add a 180 degrees rotation to it\n            .rotate(180)\n            .tint(\"#FFC147\") //Tints the assets with a orange colour in hexadecimal code\n            .filter(\"ColorMatrix\", {brightness: 2}) //Makes the assets brighter                              \n        .effect()\n            .file(dbExplosion)\n            .atLocation(target)\n            .scale(0.5)\n            .randomRotation()   \n        .play();\n        \n        let delay = Sequencer.Helpers.random_int_between(600, 1000) // neat little helper from Sequencer giving us a whole number between two values\n        await Sequencer.Helpers.wait(delay) // another helper that allows us to delay the time between each loop (when we have more than one target)\n        \n        }\n    }\nawait grenade('jb2a.throwable.throw.flask.01.orange','jb2a.explosion.side_fracture.flask.01', 'jb2a.smoke.puff.side.02.white.1','jb2a.smoke.puff.side.grey.0', 'jb2a.explosion.01.orange');","folder":null,"sort":0,"permission":{"default":0,"57wlqmR4nbpd6oQC":3},"flags":{"core":{"sourceId":"Macro.W2QYYoDR3ulKzbkt"}},"_id":"8wJXfuRBWsvtabMM"}
{"name":"Whirl","type":"script","author":"BEL3Iav6K058rvXZ","img":"modules/JB2A_DnD5e/Library/Generic/Template/Circle/Whirl_01_Regular_Blue_Thumb.webp","scope":"global","command":"//THIS MACRO IS INTENDED FOR THE WHIRL CIRCLE TEMPLATE with Intro/Loop/Outro. \n\n//TO USE THIS MACRO, you'll need Wasp's module called \"Sequencer\"\n//You can find its documentation here on Github : https://github.com/fantasycalendar/FoundryVTT-Sequencer\n//There is also a wiki with a lot more info if you want to dive into it : https://github.com/fantasycalendar/FoundryVTT-Sequencer/wiki\n\n//You can use the \" Show Sequencer Database\" Tool in the toolbar of Foundry to preview all our available Whirl color variations.\n//Thanks to the module Sequencer, you'll also be able to copy the path of the asset you want in a single click and replace it here to customize the macro.\n\n//You need to select a token before using the macro.\n\nlet selectedTokens = canvas.tokens.controlled;\nlet effectScale = 0.25;\nlet tokenSize;\n\nfor(let selectedToken of selectedTokens){\n\n    tokenSize = (selectedToken.data.width + selectedToken.data.height) /2;\nnew Sequence()\n//Will play the intro sequence of a blue whirl animation.\n    .effect()\n        .file(\"jb2a.template_circle.whirl.intro.blue\") //Edit this line to customize the intro animation as follow : jb2a.template_circle.whirl.intro.color\n        .atLocation(selectedToken)\n        .scale(tokenSize * effectScale)\n        //.belowTokens() \n        .waitUntilFinished(-1000)\n//Then it will transition to the loop sequence of a blue whirl animation.\n    .effect()\n        .file(\"jb2a.template_circle.whirl.loop.blue\") //Edit this line to customize the loop animation as follow : jb2a.template_circle.whirl.loop.color\n        .atLocation(selectedToken)\n        .scale(tokenSize * effectScale)\n        //.belowTokens()\n        .fadeIn(500)\n        .fadeOut(500)\n        .waitUntilFinished(-1000)\n//Finally it will play the outro sequence of a blue whirl animation as follow : jb2a.template_circle.whirl.outro.color\n    .effect()\n        .file(\"jb2a.template_circle.whirl.outro.blue\") //Edit this line to customize the outro animation.\n        .atLocation(selectedToken)\n        .scale(tokenSize * effectScale)\n        //.belowTokens() \n            \n    .play()\n}","folder":null,"sort":0,"permission":{"BEL3Iav6K058rvXZ":3},"flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.e3oACqy4EALxW2N9"}},"_id":"8wTsHszafgDbzIK8"}
{"name":"Arrows - Bolts","type":"script","author":"BEL3Iav6K058rvXZ","img":"modules/JB2A_DnD5e/Library/Generic/Weapon_Attacks/Ranged/Arrow01_01_Regular_White_Thumb.webp","scope":"global","command":"//THIS MACRO IS INTENDED FOR ARROWS AND BOLTS ONLY.\n\n//TO USE THIS MACRO, you'll need Wasp's module called \"Sequencer\"\n//You can find its documentation here on Github : https://github.com/fantasycalendar/FoundryVTT-Sequencer\n//There is also a wiki with a lot more info if you want to dive into it : https://github.com/fantasycalendar/FoundryVTT-Sequencer/wiki\n\n//You can use the \"Show Sequencer Database\" Tool in the toolbar of Foundry to preview all our available arrow attack animations.\n//Thanks to the module Sequencer, you'll also be able to copy the path of the asset you want in a single click and replace it here to customize the macro.\n\n//It will play the animation of the arrow or bolt and choose the right file corresponding to the distance between the caster and the target. \n//For example, to follow the list above, change it to jb2a.arrow.lightning.green to play a green arrow attack with lightning damage type.\n//Another example, jb2a.bolt.cold.blue to play a blue bolt with cold damage type.\n\nlet selectedToken = canvas.tokens.controlled[0];\nlet targets = Array.from(game.user.targets);\n\nfor(let target of targets){\nnew Sequence()\n    .effect()\n        .file(\"jb2a.arrow.physical.white.01\") //Replace the text between quotation marks.\n        .atLocation(selectedToken)\n        .stretchTo(target)       \n    .play();\n}","folder":null,"sort":0,"permission":{"BEL3Iav6K058rvXZ":3},"flags":{"core":{"sourceId":"Macro.SCLqktdZTaBKsVFY"},"advanced-macros":{"runAsGM":false}},"_id":"9Uqq27aB4pwygo9H"}
{"name":"Grease","type":"script","author":"BEL3Iav6K058rvXZ","img":"modules/JB2A_DnD5e/Library/1st_Level/Grease/Grease_Dark_Brown_Thumb.webp","scope":"global","command":"//TO USE THIS MACRO, you'll need Wasp's module called \"Sequencer\" and Honeybadger's module called \"Warp Gate\"\n//You can find their respective documentation on Github : \n//Sequencer : https://github.com/fantasycalendar/FoundryVTT-Sequencer/wiki\n//Warp Gate : https://github.com/trioderegion/warpgate\n\n//Let's first use Warp Gate to determine where to place the effect.\nlet config = {\n    size:2,\n    icon: 'modules/JB2A_DnD5e/Library/1st_Level/Grease/Grease_Dark_Brown_Thumb.webp',\n    label: 'Grease',\n    tag: 'slimy',\n    t: 'Square',\n    drawIcon: true,\n    drawOutline: true,\n    interval: 1,\n}\n//This will make the \"Crosshair\" appear. \nlet position = await warpgate.crosshairs.show(config);\n//As soon as you click, the position will be recorded and we'll hand this over to Sequencer below with .atLocation()\nnew Sequence()\n    .effect()\n        .file('jb2a.grease.dark_brown')\n        .atLocation(position)\n        .belowTokens()\n        .persist() //we want this to keep on looping until we tell it to stop\n        .name('Grease')\n    .play()\n\n//IMPORTANT : Assets placed with this macros can only be deleted from the canvas with the Sequencer Effect Viewer located in the FOUNDRYVTT toolbar.\n//or from another macro with this line : \n//Sequencer.EffectManager.endEffects({name: 'Grease'})","folder":null,"sort":0,"permission":{"BEL3Iav6K058rvXZ":3},"flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.nJPJFQpcAhaku1Kg"}},"_id":"C1OvVZMp9d82igCD"}
{"name":"Swirling Sparkles","type":"script","author":"BEL3Iav6K058rvXZ","img":"modules/JB2A_DnD5e/Library/Generic/Energy/SwirlingSparkles_01_Regular_Blue_Thumb.webp","scope":"global","command":"//THIS MACRO IS INTENDED FOR the SWIRLING SPARKLES.\n\n//TO USE THIS MACRO, you'll need Wasp's module called \"Sequencer\"\n//You can find its documentation here on Github : https://github.com/fantasycalendar/FoundryVTT-Sequencer\n//There is also a wiki with a lot more info if you want to dive into it : https://github.com/fantasycalendar/FoundryVTT-Sequencer/wiki\n\n//this is an example of how to combine two swirling sparkles to make it look a bit different\n\nlet selectedTokens = canvas.tokens.controlled;\nlet effectScale = 1;\nlet tokenSize;\n\nfor(let selectedToken of selectedTokens){\n\n    tokenSize = (selectedToken.data.width + selectedToken.data.height) /2;\n    new Sequence()\n      .effect()\n        .file(\"jb2a.swirling_sparkles.01.blue\")//you can change the color here by replacing blueby blue, bluepink or orangepurple (available in the Patreon pack)\n        .atLocation(selectedToken)//we are playing this animation on the first selected token\n        .scale(-1 * effectScale * tokenSize)// the -1 here means it will flip the animation\n        .wait(150)// we're delaying it very slightly to avoid having a perfect mirrored symmetry. You can try without and see which one you prefer !\n      .effect()\n        .file(\"jb2a.swirling_sparkles.01.blue\")\n        .atLocation(selectedToken)\n        .scale(effectScale * tokenSize)\n      .play()\n}","folder":null,"sort":0,"permission":{"BEL3Iav6K058rvXZ":3},"flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.3Uu8n46ZVpedKOsb"}},"_id":"GI6do0RNFUT90W9y"}
{"name":"Moonbeam","type":"script","author":"BEL3Iav6K058rvXZ","img":"modules/JB2A_DnD5e/Library/2nd_Level/Moonbeam/Moonbeam_01_Regular_Blue_Thumb.webp","scope":"global","command":"//THIS MACRO IS INTENDED FOR MOONBEAM - MARKER LIGHT - MARKER BUBBLE. \n\n//TO USE THIS MACRO, you'll need Wasp's module called \"Sequencer\" and Honeybadger's module called \"Warp Gate\"\n//You can find their respective documentation on Github : \n//Sequencer : https://github.com/fantasycalendar/FoundryVTT-Sequencer/wiki\n//Warp Gate : https://github.com/trioderegion/warpgate\n\n//Let's first use Warp Gate to determine where to place the effect.\nlet config = {\n    size:2,\n    icon: 'modules/JB2A_DnD5e/Library/2nd_Level/Moonbeam/Moonbeam_01_Regular_Blue_Thumb.webp',\n    label: 'Moonbeam',\n    tag: 'shiny',\n    t: 'circle',\n    drawIcon: true,\n    drawOutline: true,\n    interval: 1,\n}\n//This will make the \"Crosshair\" appear. \nlet position = await warpgate.crosshairs.show(config);\n//As soon as you click, the position will be recorded and we'll hand this over to Sequencer below with .atLocation()\n\n\nnew Sequence()\n//Will play the intro sequence of the Moonbeam animation.\n    .effect()\n        .file(\"jb2a.moonbeam.01.intro.blue\") //Edit this line to customize the intro animation as follow jb2a.moonbeam.01.intro.color\n        .atLocation(position)\n        .waitUntilFinished(-600)\n//Then it will transition to the loop sequence of the Moonbeam animation.        \n    .effect()\n        .file(\"jb2a.moonbeam.01.loop.blue\") //Edit this line to customize the loop animation as follow jb2a.moonbeam.version_number.loop.color\n        .atLocation(position)\n        .fadeIn(250)\n        .fadeOut(250)\n        .waitUntilFinished(-600)\n//Finally it will play the outro sequence of the Moonbeam animation as follow jb2a.moonbeam.version_number.outro.color. \n//You can also change '_explode' to '_fade' to have a different ending.\n    .effect()\n        .file(\"jb2a.moonbeam.01.outro.blue\") //Edit this line to customize the outro animation.\n        .atLocation(position)\n            \n    .play()","folder":null,"sort":0,"permission":{"BEL3Iav6K058rvXZ":3},"flags":{"core":{"sourceId":"Macro.R7tnPORKQZaZVVAQ"},"advanced-macros":{"runAsGM":false}},"_id":"I8bk8dF0t69eiI6p"}
{"name":"Weapon Throw","type":"script","author":"u7AwIDe7bKx1FJ7L","img":"modules/JB2A_DnD5e/Library/Generic/Weapon_Attacks/Ranged/Dagger01_01_Regular_White_Thumb.webp","scope":"global","command":"//THIS MACRO IS INTENDED FOR WEAPON THROW ONLY (Use the macro WeaponThrowWithReturn if you to have a return animation for the dagger01 or hammer01)\n\n//TO USE THIS MACRO, you'll need Wasp's module called \"Sequencer\"\n//You can find its documentation here on Github : https://github.com/fantasycalendar/FoundryVTT-Sequencer\n//There is also a wiki with a lot more info if you want to dive into it : https://github.com/fantasycalendar/FoundryVTT-Sequencer/wiki\n\n//You can use the \"Show Sequencer Database\" Tool in the toolbar of Foundry to preview all our available thrown attack animations.\n//Thanks to the module Sequencer, you'll also be able to copy the path of the asset you want in a single click and replace it here to customize the macro.\n\n//It will play the throw sequence of the Dagger01 animation. \n\nlet selectedToken = canvas.tokens.controlled[0];\nlet targets = Array.from(game.user.targets);\n\nfor(let target of targets){\nnew Sequence()\n    .effect()\n//For example, to follow the list above, change it to jb2a.lasersword_db.throw.orange to play the double bladed thrown orange lasersword animation.\n//Another example, jb2a.handaxe.throw.02 to play the second version of the handaxe animation.\n        .file(\"jb2a.dagger.throw.01.white\") //Replace the text between quotation marks.\n        .atLocation(selectedToken)\n        .stretchTo(target)\n    .play()\n}","folder":null,"sort":0,"permission":{"BEL3Iav6K058rvXZ":3,"u7AwIDe7bKx1FJ7L":3},"flags":{"core":{"sourceId":"Macro.MNrsQfdjEKY7SiQN"}},"_id":"II7pfPqSKRQnsHbZ"}
{"name":"Spike-Trap 10x05ft","type":"script","author":"u7AwIDe7bKx1FJ7L","img":"modules/JB2A_DnD5e/Library/Generic/Traps/Spike_Trap/Stills/SpikeTrapTopHolesDeployed01_Regular_Grey_05x05ft_400x400_StillFrame.webp","scope":"global","command":"/*##################################################################\n          INSTRUCTIONS\nThis macro requires these modules : \n- Sequencer\n- Tagger\n\nPlace down a Tile with only the holes using the following filepath : \n\"modules/JB2A_DnD5e/Library/Generic/Traps/Spike_Trap/Stills/SpikeTrapTopHolesHidden01_Dark_Black_10x05ft_600x400_StillFrame.webp\"\nThe full size of the trap is 600x400 pixels. Let's make it half its original size at 300x200.\nAlso, in the details of the tile at the bottom, we have to add the tag : \"SpikeTrap\" without the quotation marks in the field provided by the Tagger module.\n####################################################################*/\n\n// Let's pre-load the animations we'll need so that every client has the animations in cache and it doesn't mess the delays.\nawait Sequencer.Preloader.preloadForClients([\n  \"jb2a.spike_trap.10x05ft.top.holes.normal.01\", \n  \"jb2a.spike_trap.10x05ft.top.holes.still_frame.deployed\",\n  \"jb2a.spike_trap.10x05ft.top.holes.rearming.01\",\n])\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay)) \nlet sourcePos = await Tagger.getByTag(\"SpikeTrap\"); // this will return an array of tiles which contain the tag \"SpikeTrap\"\nconst trapSize = { width: 300, height: 200 }; // Instead of repeating this for every Sequencer effect, I'm defining it at the top\nawait wait(100);\n\nasync function trapTrigger() {\nfor (const source of sourcePos) { // This will execute the Sequence for each tile of the array with the Tag\n   new Sequence()\n      .effect()\n        .file(\"jb2a.spike_trap.10x05ft.top.holes.normal.01\")\n        .atLocation(source)\n        .size(trapSize)\n        .belowTokens()\n        .fadeOut( 250,{ ease: \"linear\", delay: -2400 })\n        .waitUntilFinished(-2700)\n      .effect()\n        .file(\"jb2a.spike_trap.10x05ft.top.holes.still_frame.deployed\")\n        .atLocation(source)\n        .size(trapSize)\n        .belowTokens()\n        .persist() // Persist means we'll keep this still-frame displayed until we decide to switch to the re-arming Sequence\n        .name('SpikeTrap-Deployed')\n    .play();\n}\n}\n\nasync function trapRearm(){\n  for (const source of sourcePos) {\n    new Sequence()\n      .effect()\n        .file(\"jb2a.spike_trap.10x05ft.top.holes.rearming.01\")\n        .atLocation(source)\n        .size(trapSize)\n        .belowTokens()\n      .play()\n  }\n  await wait(600)\n  Sequencer.EffectManager.endEffects({name: 'SpikeTrap-Deployed'}) // This will remove the still-frame we persisted earlier\n}\n\n// At this point of the macro, we have defined what we want to happen when we execute the trapTrigger() function and when we execute the trapRearm() function.\n// We need a way for the macro to know which one to use depending on if the still-frame is displayed or not.\n\nconst effect = Sequencer.EffectManager.getEffects({name: 'SpikeTrap-Deployed'}); \n\nif(!effect.length){ // If the array of persisting effect is empty, let's trigger the trap, otherwise we re-arm it.\n  await trapTrigger()\n}\nelse{\n  await trapRearm()\n}","folder":null,"sort":0,"permission":{"default":0,"u7AwIDe7bKx1FJ7L":3},"flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.zoiy7LQR5FYDLj0f"}},"_id":"Lp6mlLMsD0yzufPG"}
{"name":"Bless","type":"script","author":"BEL3Iav6K058rvXZ","img":"modules/JB2A_DnD5e/Library/1st_Level/Bless/Bless_01_Regular_Yellow_Thumb.webp","scope":"global","command":"//THIS MACRO IS INTENDED FOR the spell BLESS.\n\n//TO USE THIS MACRO, you'll need Wasp's module called \"Sequencer\"\n//You can find its documentation here on Github : https://github.com/fantasycalendar/FoundryVTT-Sequencer\n//There is also a wiki with a lot more info if you want to dive into it : https://github.com/fantasycalendar/FoundryVTT-Sequencer/wiki\n\n//Bless has an intro for when the spell is cast and a looped version to make it last a bit longer (or to be used in Custom Token Animations for a marker)\n\n//You can use the \" Show Sequencer Database\" Tool in the toolbar of Foundry to preview all our available on tokens animations.\n//Thanks to the module Sequencer, you'll also be able to copy the path of the asset you want in a single click and replace it here to customize the macro.\n\n//Let's first define which tokens are targeted\nlet targets = Array.from(game.user.targets);\n//For each target of the targets array, we'll play a sequence\nfor(let target of targets){       \n    new Sequence()\n    .effect()\n    //Here's how we call on to an asset using our database registered with Sequencer.\n    //Without the database, it would look something like this : \n    //.file(\"modules/jb2a_patreon/Library/1st_Level/Bless/Bless_01_Regular_Yellow_Intro_400x400.webm\")\n    \n        .file(\"jb2a.bless.200px.intro.yellow\")\n        //Where do we want the animation to be played ? on the target we defined in the for loop.\n        .atLocation(target)\n        //We want the next asset, which will be the looped version, to start slightly before the end of the intro to make the transition smoother\n        .waitUntilFinished(-500) \n    //Now, let's call the looped version. Same principle as for the intro       \n    .effect()\n        .file(\"jb2a.bless.200px.loop.yellow\")\n        .atLocation(target)    \n        .waitUntilFinished(-500)        \n    //I seperated this last looped version to be able to add a Fadeout at the end of 1000ms or 1 second before the end of the animation.\n    .effect()\n        .file(\"jb2a.bless.200px.loop.yellow\")\n        .atLocation(target)\n        .fadeOut(1000)\n    .play()\n    \n};","folder":null,"sort":0,"permission":{"BEL3Iav6K058rvXZ":3},"flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.40JOS43fUORukZmw"}},"_id":"NhSjJ3IP13sAMxv7"}
{"name":"Arrows - Bolts with Sneak Attack","type":"script","author":"BEL3Iav6K058rvXZ","img":"modules/JB2A_DnD5e/Library/1st_Level/Sneak_Attack/Sneak_Attack_Dark_Green_Thumb.webp","scope":"global","command":"//FOR THE SNEAK ATTACK ANIMATION WITH RANGED ATTACK LILE ARROWS, BOLTS AND BULLETS ONLY.\n\n//TO USE THIS MACRO, you'll need Wasp's module called \"Sequencer\"\n//You can find its documentation here on Github : https://github.com/fantasycalendar/FoundryVTT-Sequencer\n//There is also a wiki with a lot more info if you want to dive into it : https://github.com/fantasycalendar/FoundryVTT-Sequencer/wiki\n\n//You can use the \"Show Sequencer Database\" Tool in the toolbar of Foundry to preview all our available Arrow/Bolts/Bullets attack animations.\n//Thanks to the module Sequencer, you'll also be able to copy the path of the asset you want in a single click and replace it here to customize the macro.\n\n//It will play the animation of the arrow and choose the right file corresponding to the distance between the caster and the target. \n\nlet target = Array.from(game.user.targets)[0];\n\nlet sequence = new Sequence()\n\n    .effect()\n//This part will play the Sneak Attack animation.\n//For example, following available colors listed above, if you want the dark red sneak attack animation change it to jb2a.sneak_attack.dark_red\n\n        .file(\"jb2a.sneak_attack.dark_green\") //Replace the text between quotation marks.\n\n//You can change 'target' by 'canvas.tokens.controlled[0]' if you want the animation to be on the caster instead of the target.\n        .atLocation(target)\n        .anchor({ x: 0.5, y: 1 })\n        .scale(.5)\n\n//OPTIONAL you can delete the following sequence if you don't want the text animation\n\n    .effect()\n//This part will play the animated text Sneak Attack.\n//Choose between jb2a.sneak_attack_text.01 and jb2a.sneak_attack_text.02\n\n        .file(\"jb2a.sneak_attack_text.01\") //Replace the text between quotation marks.\n\n//You can change 'target' by 'canvas.tokens.controlled[0]' if you want the animation to be on the caster instead of the target.\n        .atLocation(target)\n        .anchor({ x: 0.5, y: 0.25 })\n        .scale(.5)\n\n    .effect()\n//It will play the animation of the arrow or bolt and choose the right file corresponding to the distance between the caster and the target. \n//For example, to follow the list above, change it to jb2a.arrow.lightning.green to play a green arrow attack with lightning damage type.\n//Another example, jb2a.bolt.cold.blue to play a blue bolt with cold damage type.\n\n        .file(\"jb2a.arrow.physical.white.01\") //Replace the text between quotation marks.\n        .atLocation(canvas.tokens.controlled[0])\n        .stretchTo(target)\n\n//This is a delay before the melee attack begins.\n//The value is in milliseconds, modify it as you wish. \n//You can delete the line if you don't want the delay.\n        .delay(2000)\n\n    .play();","folder":null,"sort":0,"permission":{"BEL3Iav6K058rvXZ":3},"flags":{"core":{"sourceId":"Macro.VMqfpWOrXtbAu43w"}},"_id":"OlAryXyVI7AOqM7a"}
{"name":"Energy Field","type":"script","author":"BEL3Iav6K058rvXZ","img":"modules/JB2A_DnD5e/Library/Generic/Energy/EnergyFieldTop_02_Regular_Blue_Thumb.webp","scope":"global","command":"let selectedTokens = canvas.tokens.controlled; //for targeted tokens instead, use Array.from(game.user.targets);\nlet effectScale = 0.4; // this serves as a multiplier for the size of the effect.\nlet effectColor = \"blue\";\nlet effectFade = 1000;\n// You can change the color by replacing \"blue\" by \"green\" for example.\n//Click the Sequencer Database button to see all available colors.\n\nlet tokenSize; // here, we define this variable that we will calculate inside the following loop, for each selected token\n//let's create a loop that will apply the effect on each selected token.\nfor(let selectedToken of selectedTokens){\n    tokenSize = (selectedToken.data.width + selectedToken.data.height) /2;\nnew Sequence() \n    .effect()\n        .attachTo(selectedToken)\n        .file(`jb2a.energy_field.02.below.${effectColor}`)\n        .belowTokens()//by default, the effect would be played above the tokens, we want this one to be played underneath so we can place the overlay above it\n        .scale(effectScale * tokenSize)\n        .fadeIn(effectFade, {ease: \"easeOutCubic\"})\n        .persist()//This will make it contiously loop until dismissed by another macro (see below) or by pressing the Sequencer Effects Viewer button.\n        .name(\"EnergyFieldBlue\")//Could be anything. This name will make it easier to delete it via macro (see commented macro below)\n    .effect()\n        .attachTo(selectedToken)\n        .file(`jb2a.energy_field.02.above.${effectColor}`)\n        .scale(effectScale * tokenSize)\n        .fadeIn(effectFade, {ease: \"easeOutCubic\"})\n        .persist()\n        .name(\"EnergyFieldBlue\")//Named it the same so we can dismiss both at the same time\n      .play();\n}\n      //The text below is commented out. You can copy and paste it in another macro to dismiss the animation. Don't forget to remove the two forward slashes to uncomment it !\n\n      // Sequencer.EffectManager.endEffects({name: \"EnergyFieldBlue\"})","folder":null,"sort":0,"permission":{"BEL3Iav6K058rvXZ":3},"flags":{"core":{"sourceId":"Macro.KiPOhDcj3o8N4emD"}},"_id":"PUrID8s6oNTnXKtQ"}
{"name":"Melee Attacks - 2 Random from list","type":"script","author":"BEL3Iav6K058rvXZ","img":"modules/JB2A_DnD5e/Library/Generic/Weapon_Attacks/Melee/Quarterstaff01_05_Regular_White_Thumb.webp","scope":"global","command":"//You'll need the module Sequence from Wasp to be Able to use this macro.\n//https://github.com/fantasycalendar/FoundryVTT-Sequencer\n\n//You can use our macro called \"Sequencer Database Search\" to find and preview all melee attacks available in our library.\n//Thanks to the module Sequencer, you'll also be able to copy the path of the asset in a single click.\n\n//This macro is for Melee Attack only.\n//It plays a succession of two random melee attacks seamlessly. \n\nlet target = Array.from(game.user.targets)[0];\n\nlet sequence = new Sequence()\n    .effect()\n //Choose your melee attack animation and replace \"jb2a.quarterstaff.melee.01.white\" by a file path or a database name from the Sequencer DataBase Macro.\n        .file(\"jb2a.quarterstaff.melee.01.white\")\n        .atLocation(canvas.tokens.controlled[0])\n        .stretchTo(target)\n//This is a delay before the next melee attack begins. The value is in milliseconds, modify it as you wish. This delay is specifically with the new melee weapon attacks.\n        .waitUntilFinished(-500) \n    .effect()\n //Choose your melee attack animation and replace \"jb2a.quarterstaff.melee.01.random_white\" by a file path or a database name from the Sequencer DataBase Macro.\n        .file(\"jb2a.quarterstaff.melee.01.white\")\n        .atLocation(canvas.tokens.controlled[0])\n        .stretchTo(target)\n.play()","folder":null,"sort":0,"permission":{"BEL3Iav6K058rvXZ":3},"flags":{"core":{"sourceId":"Macro.SCLqktdZTaBKsVFY"},"advanced-macros":{"runAsGM":false}},"_id":"RmxGjmNx0aWSj2L2"}
{"name":"Energy Strands","type":"script","author":"BEL3Iav6K058rvXZ","img":"modules/JB2A_DnD5e/Library/Generic/Marker/EnergyStrands_01_Regular_Blue_Thumb.webp","scope":"global","command":"let selectedTokens = canvas.tokens.controlled;//for targeted tokens instead, use Array.from(game.user.targets);\nlet effectColor = \"blue\";\n// You can change the color by replacing \"Dark_Red\" by \"Regular_PinkYellow\" for example.\n//Click the Sequencer Database button to see all available colors.\nlet effectScale = 0.25; // this serves as a multiplier for the size of the effect.\nlet tokenSize; // here, we define this variable that we will calculate inside the following loop, for each selected token\n//let's create a loop that will apply the effect on each selected token.\nfor(let selectedToken of selectedTokens){\n    tokenSize = (selectedToken.data.width + selectedToken.data.height) /2;\n    new Sequence() \n        .effect()\n            .attachTo(selectedToken)\n            .file(`jb2a.energy_strands.complete.${effectColor}.01`)\n            .belowTokens()//by default, the effect would be played above the tokens, we want this one to be played underneath so we can place the overlay above it\n            .scale(effectScale * tokenSize)\n            .persist()//This will make it contiously loop until dismissed by another macro (see below) or by pressing the Sequencer Effects Viewer button.\n            .name(\"EnergyStrand\")//Could be anything. This name will make it easier to delete it via macro (see commented macro below)\n        .effect()\n            .attachTo(selectedToken)\n            .file(`jb2a.energy_strands.overlay.${effectColor}.01`)\n            .scale(effectScale * tokenSize)\n            .persist()\n            .name(\"EnergyStrand\")//Named it the same so we can dismiss both at the same time\n          .play();\n}\n      //The text below is commented out. You can copy and paste it in another macro to dismiss the animation. Don't forget to remove the two forward slashes to uncomment it !\n\n      //Sequencer.EffectManager.endEffects({name: \"EnergyStrand\"})","folder":null,"sort":0,"permission":{"BEL3Iav6K058rvXZ":3},"flags":{"core":{"sourceId":"Macro.HkjvnmGTtESQyGBo"}},"_id":"aemLITe41fKoUoSq"}
{"name":"Falling Rocks","type":"script","author":"BEL3Iav6K058rvXZ","img":"modules/JB2A_DnD5e/Library/Generic/Traps/Falling_Rocks/FallingRocks01Side_01_Regular_Grey_05x05ft_Thumb.webp","scope":"global","command":"// This macro uses the Sequencer module.\n// Info, tutorials and examples available on Github : https://github.com/fantasycalendar/FoundryVTT-Sequencer/wiki\n\n//You can use the \"Show Sequencer Database\" Tool in the toolbar of Foundry to preview all our Falling Rocks animations.\n//Thanks to the module Sequencer, you'll also be able to copy the path of the asset you want in a single click and replace it in .file() to customize the macro.\n\nlet selectedTokens = canvas.tokens.controlled; // This will output an array of all currently selected tokens.\n\n// this following loop will play the animation for each selected token (each element of the array)\nfor(let selectedToken of selectedTokens){\n    new Sequence()\n        .effect()\n            .file(\"jb2a.falling_rocks.top.1x1.grey\") // in between the \"\", you can paste the database path of another asset. For example, \"jb2a.falling_rocks.top.1x1.sandstone\" (available in the Patreon Pack)\n            .scale(0.5)\n            .atLocation(selectedToken)\n            .fadeOut(250, {ease: \"easeInSine\"})\n            .randomizeMirrorX() // as its name suggests, this will randomize how it's displayed and avoid repetition as much as possible\n            .randomizeMirrorY() \n    .play()\n}","folder":null,"sort":0,"permission":{"BEL3Iav6K058rvXZ":3},"flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.drbQMVC8Ny3qmNKS"}},"_id":"dOM1qtdUClAqM4WN"}
{"name":"Bomb Throw","type":"script","author":"57wlqmR4nbpd6oQC","img":"modules/JB2A_DnD5e/Library/Generic/Weapon_Attacks/Ranged/ThrowBomb01_01_Regular_Black_Thumb.webp","scope":"global","command":"/*\n####################################################\n   This macro needs the Sequencer module to work.\n####################################################\n*/\n\n// Let's create a function with arguments. That means that we can call this function later and define each argument (here they're called dbThrow, dbFracture and dbExplosion);\n// If you look at the end of the macro, we're using each arg to call a specific Database path. (i.e: await grenade('dbPath01', 'dbPath02', 'dbPath03'))\nasync function grenade(dbThrow, dbFracture, dbExplosion, dbGroundImpact){\n    let source = token; // this is the first selected token\n    let targets = Array.from(game.user.targets); // This is an array that will contain all targeted tokens (we need at least one to know where to throw the potion or grenade)\n        for(let target of targets){ // The for loop will iterate for each target, if more than one token is targeted. Otherwise it will run it only once\n        new Sequence()\n        .effect() \n            .file(dbThrow)\n            .atLocation(source)\n            .stretchTo(target)\n            .waitUntilFinished(-150)\n        .effect()\n            .file(dbFracture)\n            .atLocation(target)\n            .scale(0.35) \n        .effect()\n            .file(dbExplosion)\n            .atLocation(target)\n        .effect()\n            .file(dbGroundImpact)\n            .atLocation(target)\n            .belowTokens()\n            .scale(0.4)\n            .scaleIn(0.1, 100, {ease: \"easeOutExpo\"})\n            .duration(5000)\n            .fadeOut(3250, {ease: \"easeInSine\"})    \n        .play();\n        \n        let delay = Sequencer.Helpers.random_int_between(600, 1000) // neat little helper from Sequencer giving us a whole number between two values\n        await Sequencer.Helpers.wait(delay) // another helper that allows us to delay the time between each loop (when we have more than one target)\n        \n        }\n    }\nawait grenade('jb2a.throwable.throw.bomb.01.black','jb2a.explosion.shrapnel.bomb.01.black','jb2a.explosion.08.orange','jb2a.impact.ground_crack.orange');\n\n//If you liked the groundcrack showed in our patreon post, this file isn't part of our module since it is under the Fan-Content License of Forgotten Adventures. But it can be downloaded here : https://www.dropbox.com/s/7z72w0cjznx6yeo/Modified_Blast_Tile_From_ForgottenAdventures.zip?dl=1\n//Replace jb2a.impact.ground_crack.orange in the last line of code by the path where you stored the downloaded files.\n//As an example 'Data/yourFolderName/FireballBlast_01_Orange_800x800.webm'","folder":null,"sort":0,"permission":{"default":0,"57wlqmR4nbpd6oQC":3},"flags":{"core":{"sourceId":"Macro.nvEzRX1QqW2iReIg"}},"_id":"dVmaXjoQ31pAJqaJ"}
{"name":"Shield","type":"script","author":"BEL3Iav6K058rvXZ","img":"modules/JB2A_DnD5e/Library/1st_Level/Shield/Shield_01_Regular_Blue_Thumb.webp","scope":"global","command":"//THIS MACRO IS INTENDED FOR SHIELD. \n\n//TO USE THIS MACRO, you'll need Wasp's module called \"Sequencer\"\n//You can find its documentation on Github : https://github.com/fantasycalendar/FoundryVTT-Sequencer/wiki\n\n//You can use the \"Show Sequencer Database\" Tool in the toolbar of Foundry to preview all our available Shield animations.\n//Thanks to the module Sequencer, you'll also be able to copy the path of the asset you want in a single click and replace it here to customize the macro.\n\n\n//You need to select a token before using the macro.\n\nlet selectedTokens = canvas.tokens.controlled;\nlet effectScale = 0.5;\nlet tokenSize;\n\nfor(let selectedToken of selectedTokens){\n\n    tokenSize = (selectedToken.data.width + selectedToken.data.height) /2;\n\n    new Sequence()\n    //Will play the intro sequence of the Shield animation.\n        .effect()\n            .file(\"jb2a.shield.01.intro.blue\") //Edit this line to customize the intro animation as follow jb2a.shield.version_number.intro.color\n            .scale(effectScale * tokenSize)\n            .atLocation(selectedToken)\n            .waitUntilFinished(-500)\n    //Then it will transition to the loop sequence of the Shield animation.        \n        .effect()\n            .file(\"jb2a.shield.01.loop.blue\") //Edit this line to customize the loop animation as follow jb2a.shield.version_number.loop.color\n            .scale(effectScale * tokenSize)\n            .atLocation(selectedToken)\n            .fadeIn(300)\n            .fadeOut(300)\n            .waitUntilFinished(-500)\n    //Finally it will play the outro sequence of the Shield animation as follow jb2a.shield.version_number.outro.color. \n    //You can also change '_explode' to '_fade' to have a different ending.\n        .effect()\n            .file(\"jb2a.shield.01.outro_explode.blue\") //Edit this line to customize the outro animation.\n            .scale(effectScale * tokenSize)\n            .atLocation(selectedToken)\n        .play()\n}","folder":null,"sort":0,"permission":{"BEL3Iav6K058rvXZ":3},"flags":{"core":{"sourceId":"Macro.R7tnPORKQZaZVVAQ"},"advanced-macros":{"runAsGM":false}},"_id":"gcMRfTnslkDCFHCh"}
{"name":"MoltenEarth Orange Shield","type":"script","author":"BEL3Iav6K058rvXZ","img":"modules/JB2A_DnD5e/Library/Generic/Fire/ShieldMoltenEarthAbove01_01_Regular_Orange_Thumb.webp","scope":"global","command":"//THIS MACRO NEEDS SEQUENCER TO WORK.\n//It is intended for animated assets like ShieldEldritchWeb | ShieldIce | ShieldFire | ShieldMoltenEarth\n\nlet selectedTokens = canvas.tokens.controlled;\nlet effectScale = 0.5;\nlet effectColor = \"orange\"; //Click the Sequencer Database button to see all available colors.\nlet effectFade = 1000;\nlet tokenSize;\n\nfor(let selectedToken of selectedTokens){\n    tokenSize = (selectedToken.data.width + selectedToken.data.height) /2;\nnew Sequence() \n    .effect()\n        .attachTo(selectedToken)\n        .file(`jb2a.shield_themed.below.molten_earth.01.${effectColor}`)\n        .belowTokens()//by default, the effect would be played above the tokens, we want this one to be played underneath so we can place the overlay above it\n        .scale(effectScale * tokenSize)\n        .fadeIn(effectFade, {ease: \"easeOutCubic\"})\n        .persist()//This will make it contiously loop until dismissed by another macro (see below) or by pressing the Sequencer Effects Viewer button.\n        .name(\"MoltenEarth Shield\")//Could be anything. This name will make it easier to delete it via macro (see commented macro below)\n    .effect()\n        .attachTo(selectedToken)\n        .file(`jb2a.shield_themed.above.molten_earth.01.${effectColor}`)\n        .scale(effectScale * tokenSize)\n        .fadeIn(effectFade, {ease: \"easeOutCubic\"})\n        .persist()\n        .name(\"MoltenEarth Shield\")//Named it the same so we can dismiss both at the same time\n      .play();\n}\n      //The text below is commented out. You can copy and paste it in another macro to dismiss the animation. Don't forget to remove the two forward slashes to uncomment it !\n\n      //Sequencer.EffectManager.endEffects({name: \"MoltenEarth Shield\"})","folder":null,"sort":0,"permission":{"BEL3Iav6K058rvXZ":3},"flags":{"core":{"sourceId":"Macro.KiPOhDcj3o8N4emD"}},"_id":"kpWYzI3ckcFxmALA"}
{"name":"Melee_Attack_Advanced","type":"script","scope":"global","author":"n1PqRj2wSLmNmxBt","img":"modules/JB2A_DnD5e/Library/Generic/Weapon_Attacks/Melee/Group04/MeleeAttack04_Katana01_Thumb.webp","command":"/********************\n * INTRO AND CREDITS*\n * ******************/\n\n    //This macro is designed to work with the Sequencer module \n    //and can be run from FoundryVTT's macro Hotbar or through \n    //Automated Animation (needs the Advanced Macros module)\n    //\n    //Thanks to Vauryx for allowing us to use some of the code behind the Target React module.\n\n\n/********************************\n * DEFINITION OF VARIABLES*\n ********************************/\n    // Here's a list of the weapon groups at the time of the release v0.5.5:\n    // \n    // GROUP 01\n    //  -weaponGroup:\n    //      'melee_attack.01'\n    //  -weapon:\n    //      'butterflysword.01'\n    //      'chakram.01'\n    //      'shortsword.01'\n    //\n    //  -trail:\n    //      'trail.01'\n    //      'trail.02'\n    //      'trail.03'\n    // -color: \n    //      'blueyellow'\n    //      'orangered'\n    //      'pinkpurple'\n\n    // GROUP 02\n    //  -weaponGroup:\n    //      'melee_attack.02'\n    //  -weapon:\n    //      'hammer.01'\n    //      'hammer.02'\n    //      'handaxe.01'\n    //      'wrench.01'\n    //      'bone.01'\n    //      \n    //  -trail:\n    //      'trail.01'\n    //      'trail.02'\n    //      'trail.03'\n    // -color: \n    //      'blueyellow'\n    //      'orangered'\n    //      'pinkpurple'\n\n    // GROUP 03\n    //  -weaponGroup:\n    //      'melee_attack.03'\n    //  -weapon:\n    //      'greataxe.01'\n    //      'greatbone.01'\n    //      'greatsword.01'\n    //      'maul.01'\n    //      \n    //  -trail:\n    //      'trail.01'\n    //      'trail.02'\n    //      'trail.03'\n    // -color: \n    //      'blueyellow'\n    //      'orangered'\n    //      'pinkpurple'\n\n    // GROUP 04\n    //  -weaponGroup:\n    //      'melee_attack.04'\n    //  -weapon:\n    //      'katana.01'\n    //      \n    //  -trail:\n    //      'trail.01'\n    //      'trail.02'\n    //      'trail.03'\n    // -color: \n    //      'blueyellow'\n    //      'orangered'\n    //      'pinkpurple'\n\n\n\n    // If we trigger this macro from Automated Animations, we will override these default values in the \"Send Args\" field of the macro entry, within A-A's auto-recognition menu.\n    // We'll explain later on how to do so.\n    // The next three variables are the ones we want to change to make a different weapon, different trail, different color or a mix of all three.\n    // As it stands by default, we will pick: \n    // - From the group 04 => 'melee_attack.04'\n    // - Katana animation => 'katana.01'\n    // - The first trail variation => 'trail.01'\n    // - A Blue-Yellow color => 'blueyellow'\n    // - A Yellow impact => 'jb2a.impact.006.yellow'\n    let weaponGroup = 'melee_attack.04';\n    let weapon = 'katana.01';\n    let trail = 'trail.01';\n    let color = 'blueyellow';\n    let impact = 'jb2a.impact.006.yellow';\n\n\n    // The Sequencer.Database.getEntry() function will return an array of all \n    // the entries (or variations in this case) referenced underneath this path.\n    // Note that for each group of weapons, each variation corresponds to a specific trail\n    // Example: \n    // 'jb2a.melee_2H_01.greataxe.01.0' points to the first attack variation and corresponds to \n    // 'jb2a.melee_2H_01.trail.01.0'\n\n\n    // We'll define further what source and targets are but for now, \n    let source;\n    let targets;\n\n/**********************************\n * DEPENDENCIES CHECK AND WARNINGS*\n **********************************/\n    let isFromHotbar = event instanceof PointerEvent || event instanceof KeyboardEvent;\n    if(!game.modules.get(\"advanced-macros\")?.active && !isFromHotbar){\n        return ui.notifications.warn(\"Make sure to use the Advanced Macros module if you trigger this macro from Automated Animations\")\n    }\n\n    // source will either be the character's token if the macro is triggered via Automated Animations\n    // If not, we will fall back onto the first selected token.\n    // targets will be an array of however many tokens are targeted.\n    if(!isFromHotbar && typeof args === \"object\"){\n        source = args[1]?.sourceToken; \n        targets = args[1]?.allTargets;\n        // in A-A, in the \"Send Args\" field, we can use 5 different arguments (or list of values separated by commas)\n        // As an example, for the Chakram you can copy and paste this: \n        // melee_attack.01, chakram.01, trail.01, blueyellow, jb2a.impact.yellow\n        weaponGroup = args[2]?.[0] ?? 'melee_attack.04';\n        weapon = args[2]?.[1] ?? 'katana.01';\n        trail = args[2]?.[2] ?? 'trail.03';\n        // If there is nothing in the args, we should use the default value we defined earlier.\n        color = args[2]?.[3] ?? color\n        // Same principle for the impact. \n        // If you write nothing in the \"Send Args\" field, let's have a default behaviour for A-A to work with.\n        impact = args[2]?.[4] ?? impact;\n    }\n    else{\n        // if the macro is run from the hotbar, let's have some default behaviour for these variables.\n        source = canvas.tokens.controlled[0];\n        targets = Array.from(game.user.targets);\n    }\n    const dbPath = `jb2a.${weaponGroup}.${weapon}`; // read jb2a.melee_2H_01.greataxe.01\n    const entries = Sequencer.Database.getEntry(dbPath);\n\n    // The length of the array will represent how many entries there are, \n    // which we'll use later on to randomly pick the appropriate one.\n    const entriesLength = entries.length;\n    // just in case something went wrong with A-A \n    // or the user hasn't selected a token and triggers the macro from the hotbar, let's warn\n    if(!source) {\n     return ui.notifications.warn(\"Please select a token\")\n    }\n    // Let's do the same for targetted tokens which will be an array if it exists.\n    if(!targets || targets?.length === 0) {\n     return ui.notifications.warn(\"Please target at least one token\")\n    }\n\n\n\n\n/*****************************************\n * MAIN ANIMATION FUNCTION INITIALIZATION*\n * ***************************************/\n\n    async function animation(target, randMelee, randTrail, impact, isMirrored, targetScale){\n        // Here is some Maths, move along... nothing to see here.\n        const amplitude = Sequencer.Helpers.random_float_between(0.05, 0.2);\n        let hitRay = new Ray(source, target);\n        const shakeDirection = { x: Math.sign(hitRay.dx), y: Math.sign(hitRay.dy) };\n        const values = {\n            x: [0, -amplitude * shakeDirection.y, amplitude * shakeDirection.y, (-amplitude * shakeDirection.y)/4, (amplitude * shakeDirection.y)/4, 0],\n            y: [0, amplitude * shakeDirection.x, -amplitude * shakeDirection.x, (amplitude * shakeDirection.x)/4, (-amplitude * shakeDirection.x)/4, 0]\n        }\n        const interval = 50;\n        const easeOption = \"easeInOutSine\"\n        // This is the core of the macro. I won't go into details as the\n        // wiki for sequencer is the best resource to learn about it: \n        // https://fantasycomputer.works/FoundryVTT-Sequencer/#/\n        // check it out, follow the tutorials, everything is there!\n        new Sequence()\n        .effect() \n            .file(`${randMelee}`)\n            .atLocation(source)\n            .rotateTowards(target)\n            .spriteOffset({ x: -150, y: 0 })\n            .scale(0.5)\n            .mirrorY(isMirrored)\n        .effect() \n            .file(`${randTrail}`)\n            .atLocation(source)\n            .rotateTowards(target)\n            .spriteOffset({ x: -150, y: 0 })\n            .scale(0.5)\n            .mirrorY(isMirrored)\n            .waitUntilFinished(-1000) \n            // The hit should always be 1 second from the end of the weapon attack and the trail\n        .effect()\n            .file(`${impact}`)\n            .atLocation(target)\n            .scaleToObject(1.2, {uniform: true})\n        // This next effect is for a little blood splatter. You can remove it if you want.\n        //START - BLOOD SPLATTER EFFECT (commented out in the free version as it is not available)\n\n        // .effect()\n        //     .file('jb2a.liquid.splash_side.red')\n        //     .atLocation(target)\n        //     .rotateTowards(source)\n        //     .randomRotation()\n        //     .scaleToObject(1.5, {uniform: true})\n\n        //END - BLOOD SPLATTER EFFECT\n\n        // This next section of the sequence is for the token shake.\n        // Feel free to remove everything between here and before the .play()!\n        // make sure the .play() is still there as the sequence wouldn't fire otherwise!\n\n        // START OF SHAKE SECTION\n        .animation()\n            .on(target)\n            .fadeOut(50)\n        .effect()\n            .from(target)\n            .loopProperty(\"spriteContainer\", \"position.x\", { \n                values: values.x,\n                duration: interval-((interval*amplitude)/2),\n                gridUnits: true,\n                ease: easeOption\n            })\n            .loopProperty(\"spriteContainer\", \"position.y\", { \n                values: values.y,\n                duration: interval-((interval*amplitude)/2),\n                gridUnits: true,\n                ease: easeOption\n            })\n            .scale({ x: targetScale.x, y: targetScale.y })\n            .duration(interval*9)\n            .waitUntilFinished()\n        .animation()\n            .on(target)\n            .fadeIn(50)\n        // END OF SHAKE SECTION\n\n        .play();\n    };\n\n/**************************\n * ANIMATION CALL AND LOOP*\n **************************/\n\n    // We will loop through this code for each targeted token and \n    // pick a different random number each loop in order to have more\n    // probability to pick a different animation everytime\n    for(let target of targets){\n        let targetScale = {x: target?.document?.texture?.scaleX ?? 1, y:target?.document?.texture?.scaleY ?? 1}\n        // Arrays start at 0. This will return a random integer which we'll use to pick a random attack variation\n        // and its corresponding trail.\n        let rand = Sequencer.Helpers.random_int_between(0, entriesLength - 1);\n        // Here, we rebuild the database paths and pass them along to the animation function.\n        let randMelee = `${dbPath}.${rand}`;\n        let randTrail = `jb2a.${weaponGroup}.${trail}.${color}.${rand}`;\n        // Let's add to the randomisation by mirroring the animation half the time, on top of the random attack variation.\n        let isMirrored = Math.random() < 0.5; // 50% probability. 0.1 would make it 10%, 0.2 20%...etc\n        // We're adding a delay between the attacks otherwise they would play all at once.\n        let delayBetweenAttacks = Sequencer.Helpers.random_float_between(500, 800)\n\n        // This is the code which actually calls the animation function.\n        await animation(target, randMelee, randTrail, impact, isMirrored, targetScale)\n        await Sequencer.Helpers.wait(delayBetweenAttacks)\n        }","flags":{"advanced-macros":{"runAsGM":false,"runForSpecificUser":""},"core":{"sourceId":"Macro.Cs0UbR2yVheE2F9h"}},"_stats":{"systemId":"dnd5e","systemVersion":"2.1.5","coreVersion":"10.291","createdTime":1674733916603,"modifiedTime":1678202873806,"lastModifiedBy":"n1PqRj2wSLmNmxBt"},"ownership":{"default":0,"n1PqRj2wSLmNmxBt":3},"folder":null,"sort":0,"_id":"mcmSlAuvRLbI7TUa"}
{"name":"Magical Rune","type":"script","author":"BEL3Iav6K058rvXZ","img":"modules/JB2A_DnD5e/Library/Generic/Magic_Signs/Runes/AbjurationRuneLoop_01_Regular_Blue_Thumb.webp","scope":"global","command":"//THIS MACRO IS INTENDED FOR MAGIC SIGNS : RUNE with Intro/Loop/Outro. \n\n//TO USE THIS MACRO, you'll need Wasp's module called \"Sequencer\"\n//You can find its documentation here on Github : https://github.com/fantasycalendar/FoundryVTT-Sequencer\n//There is also a wiki with a lot more info if you want to dive into it : https://github.com/fantasycalendar/FoundryVTT-Sequencer/wiki\n\n//You can use the \"Show Sequencer Database\" Tool in the toolbar of Foundry to preview all our available magical runes animations.\n//Thanks to the module Sequencer, you'll also be able to copy the path of the asset you want in a single click and replace it here to customize the macro.\n\n\n//You need to select a token before using the macro.\n\nlet selectedTokens = canvas.tokens.controlled;\nlet effectScale = 0.5;\nlet tokenSize;\n\nfor(let selectedToken of selectedTokens){\n\ntokenSize = (selectedToken.data.width + selectedToken.data.height) /2;\n\nnew Sequence()\n//Will play the intro sequence of the blue abjuration rune animation.\n    .effect()\n        .file(\"jb2a.magic_signs.rune.abjuration.intro.blue\") //Edit this line to customize the intro animation as follow : jb2a.magic_signs.rune.schoolofmagicname.intro.color\n        .scale(effectScale * tokenSize)\n        .atLocation(selectedToken)\n        .belowTokens() \n        .waitUntilFinished(-550)\n//Then it will transition to the loop sequence of the blue abjuration rune animation.\n    .effect()\n        .file(\"jb2a.magic_signs.rune.abjuration.loop.blue\") //Edit this line to customize the loop animation as follow : jb2a.magic_signs.rune.schoolofmagicname.loop.color\n        .scale(effectScale * tokenSize)\n        .atLocation(selectedToken)\n        .belowTokens() \n        .fadeIn(200)\n        .fadeOut(200)\n        .waitUntilFinished(-550)\n//Finally it will play the outro sequence of the blue abjuration rune animation as follow : jb2a.magic_signs.rune.schoolofmagicname.outro.color\n    .effect()\n        .file(\"jb2a.magic_signs.rune.abjuration.outro.blue\") //Edit this line to customize the outro animation.\n        .scale(effectScale * tokenSize)\n        .atLocation(selectedToken)\n        .belowTokens()\n    .play()\n}","folder":null,"sort":0,"permission":{"BEL3Iav6K058rvXZ":3},"flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.sAqn9zEdCes0LaRk"}},"_id":"q9HKhFkD7ZHRkFCp"}
{"name":"Fireball","type":"script","author":"BEL3Iav6K058rvXZ","img":"modules/JB2A_DnD5e/Library/3rd_Level/Fireball/FireballExplosion_01_Orange_Thumb.webp","scope":"global","command":"//THIS MACRO NEEDS THE WARPGATE MODULE AND IS INTENDED FOR FIREBALL ONLY.\n//\n\n//TO USE THIS MACRO, you'll need Wasp's \"Sequencer\" module and Honeybadger's Wargate module\n//We cannot recommend reading through the Sequencer wiki enough, to learn how the magic happens : https://github.com/fantasycalendar/FoundryVTT-Sequencer/wiki\n//Although this macro only uses a very, very small part of Warpgate, there is so much more to do and learn from the documentation and wiki : https://github.com/trioderegion/warpgate\n//You can use the \"Show Sequencer Database\" Tool in the toolbar of Foundry to preview all our Fireball explosion animation.\n//Thanks to the module Sequencer, you'll also be able to copy the path of the asset you want in a single click and replace it here to customize the macro.\n\n//It will play the animation of exploding fireball leaving cracks on the ground and choose the right file corresponding to the distance between the caster and the selected position. \n//Don't forget to select the caster before using this macro.\n\n\nlet config = {\n    size:8,\n    icon: 'modules/JB2A_DnD5e/Library/3rd_Level/Fireball/FireballExplosion_01_Orange_Thumb.webp',\n    label: 'Fireball',\n    tag: 'chop power',\n    drawIcon: true,\n    drawOutline: true,\n    interval: 1\n}\n\n\nconst selected = canvas.tokens.controlled[0];\nlet position = await warpgate.crosshairs.show(config);\n\nlet sequence = new Sequence()\n\n    .effect()\n        .file(\"jb2a.fireball.beam.orange\")\n        .atLocation(selected)\n        .stretchTo(position)\n    .effect()\n        .file(\"jb2a.fireball.explosion.orange\")\n        .atLocation(position)\n        .delay(2100)\n    .effect()\n        .file(\"jb2a.ground_cracks.orange.01\")\n//        .file(\"modules/jb2a_patreon/Library/3rd_Level/Fireball/FireballBlast_01_Orange_800x800.webm\") //This file isn't part of our module, but it can be downloaded here : https://www.dropbox.com/s/7z72w0cjznx6yeo/Modified_Blast_Tile_From_ForgottenAdventures.zip?dl=1\n        .atLocation(position)\n        .belowTokens()\n        .scaleIn(0.5, 150, {ease: \"easeOutExpo\"})\n        .duration(5000)\n        .fadeOut(3250, {ease: \"easeInSine\"})\n        .name(\"Fireball_Impact\")\n        .delay(2300)\n        .waitUntilFinished(-3250)\n    .effect()\n        .file(\"jb2a.impact.ground_crack.still_frame.01\")\n        .atLocation(position)\n        .belowTokens()\n        .fadeIn(300, {ease: \"easeInSine\"})\n        .name(\"Fireball_Impact\")\n        .persist()\n.play();","folder":null,"sort":0,"permission":{"BEL3Iav6K058rvXZ":3},"flags":{"core":{"sourceId":"Macro.cNDVcu9Iut7LYUsg"}},"_id":"rmn3iYk9eX0yugAR"}
{"name":"Weapon Throw with Return","type":"script","author":"BEL3Iav6K058rvXZ","img":"modules/JB2A_DnD5e/Library/Generic/Weapon_Attacks/Ranged/Dagger01_01_Regular_White_Return_Thumb.webp","scope":"global","command":"//THIS MACRO IS INTENDED FOR WEAPON THROW AND RETURN. Currently only for Dagger01 and the Hammer01.\n\n//TO USE THIS MACRO, you'll need Wasp's module called \"Sequencer\"\n//You can find its documentation here on Github : https://github.com/fantasycalendar/FoundryVTT-Sequencer\n//There is also a wiki with a lot more info if you want to dive into it : https://github.com/fantasycalendar/FoundryVTT-Sequencer/wiki\n\n//You can use the \"Show Sequencer Database\" Tool in the toolbar of Foundry to preview all our available thrown attack with return animations.\n//Thanks to the module Sequencer, you'll also be able to copy the path of the asset you want in a single click and replace it here to customize the macro.\n\nlet selectedToken = canvas.tokens.controlled[0];\nlet targets = Array.from(game.user.targets);\n\nfor(let target of targets){\n    new Sequence()\n        .effect()\n    //First it will play the throw sequence of the Dagger01 animation. \n    //Change it to jb2a.hammer.throw.01 to play the Hammer01 animation.\n            .file(\"jb2a.dagger.throw.01.white\")\n            .atLocation(selectedToken)\n            .stretchTo(target)\n            //OPTIONAL\n            //You can adjust the value below to play the return part before or after the throwing animation ends.\n            //The current value should make the transition seamless or barely noticeable.\n            //A negative value will play the return part before the throwing animation ends. And a positive value will add a pause between the throw and the return animation. \n            .waitUntilFinished(-700) //In milliseconds  \n        .effect()\n    //Then it will transition to the return animation of the Dagger01. \n    //Change it to jb2a.hammer.return.01 to play the return version of the Hammer01 animation.  \n            .file(\"jb2a.dagger.return.01.white\")\n            .atLocation(selectedToken)\n            .stretchTo(target)\n    .play()\n}","folder":null,"sort":0,"permission":{"BEL3Iav6K058rvXZ":3},"flags":{"core":{"sourceId":"Macro.kSfIaywHwfY3sKXI"}},"_id":"v24ACH5xsHghmsJD"}
{"_id":"yOlf90cuC67jwAUN","name":"Chain Lightning ItemMacro","type":"script","author":"BEL3Iav6K058rvXZ","img":"modules/JB2A_DnD5e/Library/6th_Level/Chain_Lightning/ChainLightning_01_Regular_Blue_Primary_Thumb.webp","scope":"global","command":"//Special Thanks to @Wasp for the inspiration and code for the dialog option !\n\n// Requires the JB2A module installed and activated\n// Requires the Sequencer module\n// Requires the Item Macro module (with the \"character sheet hook\" option enabled)\n\n// Open the ItemMacro option on the top bar of the spell item and paste this macro within. \n// Roll the item with the primary token targeted.\n\nlet error = false;\n\nif(!game.modules.get(\"jb2a_patreon\") && !game.modules.get(\"JB2A_DnD5e\")){ // all these are to make sure the relevant modules are installed and activated in the world and warn the user if not.\n    error = `You need to have one of the JB2A modules installed and active to run this macro !`;\n}\nif(game.modules.get(\"jb2a_patreon\") && !game.modules.get(\"jb2a_patreon\").active){\n    error = `The \"JB2A Patreon Pack\" is installed. However, make sure it is also active for its sequencer database to be registered !`;\n}\nif(game.modules.get(\"JB2A_DnD5e\") && !game.modules.get(\"JB2A_DnD5e\").active){\n    error = `The \"JB2A free Pack\" is installed. However, make sure it is also active for its sequencer database to be registered !`;\n}\nif(!game.modules.get(\"itemacro\")){\n    error = `You need to have the module \"Item Macro\" installed to run this macro !`;\n}\nif(!game.modules.get(\"itemacro\").active){\n    error = `The \"Item Macro\" module needs to be active !`;\n}\n\nif(!game.modules.get(\"sequencer\")){\n    error = `You need to have the module \"Sequencer\" installed to run this macro !`;\n}\nif(!game.modules.get(\"sequencer\").active){\n    error = `The \"Sequencer\" module needs to be active !`;\n}\n\n\nif(error){\n    ui.notifications.error(error);\n    return;\n}\n\nconst actorD = token.actor;\nconst tokenD = token;\nconst spellLevel = actorD.spellLevel ? Number(actorD.spellLevel) : 6;\nconst targetsToJumpTo = 3 + (spellLevel-6);\nconst spellSaveDC = actorD.data.data.attributes.spelldc;\n\nasync function wait(ms) { \n    return new Promise((resolve) => {\n        setTimeout(resolve, ms);\n    });\n}\n\n// This function will output the text needed for the saving throw chat card of each target\nfunction addTokenToText(token, roll, dc){ \n\n    return `<div>\n      <div> ${token.name}</div>\n      <div>\n         ${roll >= dc ? \"<span style='color: #20854a;'>succeeds</span> with \" \n         + roll \n         + \"<span style='color: #20854a;'> (DC \" + spellSaveDC + \")</span>\" : \"<span style='color: #ad1f1f;'>fails</span> with \" \n         + roll \n         + \"<span style='color: #ad1f1f;'> (DC \" + spellSaveDC + \")</span>\"}\n        \n      </div>\n      <div><img src=\"${token.data.img}\" height=\"30\" style=\"border:0px\"></div>\n    </div>`;\n\n}\n\nasync function main(){\n\n    let chatMessageContent;\n\n\n    const targetToken = Array.from(game.user.targets)[0]; // this is the primary target\n\n// enemies will be the potential secondary targets to choose from (conditions : within 30ft distance of the priamry target and health is above 0)\n    let enemies = canvas.tokens.placeables.filter(function(target){ \n        return target?.actor?.data?.data?.attributes?.hp?.value > 0\n            && canvas.grid.measureDistance(targetToken, target) <= 32.5\n            && target !== targetToken\n            && target !== tokenD\n    });\n\n    let targetList = \"\";\n\n    for (let target of enemies) { // for each secondary target\n        //targetList and the_content is going to populate the pop-up dialog that lets you select the secondary targets\n        targetList += `<tr class='chainLightningToken' id='${target.id}'>\n            <td><img src=\"${target?.data?.img}\" width=\"30\" height=\"30\" style=\"border:0px\"> - ${target.name}</td>\n            <td><input type=\"checkbox\" class='target' name=\"${target.id}\"></td>\n        </tr>`;\n    }\n\n    let the_content = `\n        <p>Your Chain Lightning can jump to <b>${targetsToJumpTo}</b> targets.</p>\n        <form class=\"flexcol\">\n            <table width=\"100%\">\n                <tbody>\n                    <tr><th>Target</th>\n                    <th>Jump to</th>\n                    </tr>${targetList}\n                </tbody>\n            </table>\n        </form>`;\n\n    new Dialog({\n        title: \"Select targets for Chain Lightning to jump to\",\n        content: the_content, \n        buttons: {\n            one: { //only one button necessary. The callback function is what's executed when the button is pressed.\n                label: \"Damage\", callback: async (html) => {\n\n                    $(\".chainLightningToken\").off(\"mouseenter\").off(\"mouseleave\");\n                    let targets = html.find('input.target').filter((index, elem) => {\n                        return $(elem).is(\":checked\")\n                    });\n\n                    let targetTokens = new Set();\n                    \n                    let damageRoll = await new Roll(`${item.data.data.damage.parts[0][0]}`).evaluate({async: true});\n                    damageRoll.toMessage({flavor: `<h2>${item.data.data.damage.parts[0][1]} Damage !</h2>`});\n                    let save = await new Roll(\"1d20+@mod\",{mod: targetToken?.actor?.data?.data?.abilities?.dex?.save ?? 0}).evaluate({async:true});\n                    chatMessageContent = addTokenToText(targetToken, save.total, spellSaveDC);\n                    save.toMessage({flavor: chatMessageContent});\n\n                    let chains = 0;\n                    chatMessageContent = \"\";\n                    \n                    for(let target of targets){ // now that we have pressed the button, for each target we'll roll the save, send it to a chat card.\n                        chains++;                        \n                        if(chains > targetsToJumpTo) break;\n\n                        let enemyToken = canvas.tokens.get(target.name)\n\n                        let save = await new Roll(\"1d20+@mod\",{mod: enemyToken?.actor?.data?.data?.abilities?.dex?.save ?? 0}).evaluate({async:true});\n                        chatMessageContent += addTokenToText(enemyToken, save.total, spellSaveDC);\n                        \n\n                        targetTokens.add(enemyToken)\n                    }\n\n                    if(chatMessageContent !== \"\"){ // if no secondary targets are selected, this will return false and no additional message will be created\n                    ChatMessage.create({\n                        speaker: ChatMessage.getSpeaker(),\n                        flavor: chatMessageContent \n                    });\n                    }\n\n\n                    let sequence = new Sequence() // this is the naimation part, handled by the Sequencer module\n                        .effect()\n                            .file(\"jb2a.chain_lightning.primary.blue\")\n                            .atLocation(tokenD) // Going from origin\n                            .stretchTo(targetToken) // To the current loop's target                                            \n                            .waitUntilFinished(-1100)// The next sequence will start 1.1 seconds before the end of the primary Lightning\n\n                        .effect()\n                            .file(\"jb2a.static_electricity.02.blue\")\n                            .atLocation(targetToken)\n                            .wait(100)\n\n                    for(let target of targetTokens){\n                        sequence\n                            .effect()\n                                .file(\"jb2a.chain_lightning.secondary.blue\")\n                                .atLocation(targetToken) // Going from origin\n                                .stretchTo(target) // To the current loop's target                                                     \n                                .wait(100)// Slight delay between each arc\n                    }\n\n                    sequence.play()\n\n                }\n            }\n        }\n    }).render(true);\n\n    await wait(100);\n\n    $(\".chainLightningToken\").on(\"mouseenter\", function(e){\n        let token = canvas.tokens.get($(this).attr('id'));\n        token._onHoverIn(e);\n    }).on(\"mouseleave\", function(e){\n        let token = canvas.tokens.get($(this).attr('id'));\n        token._onHoverOut(e);\n    });\n\n}\n\nmain()\n\n// this outputs the normal chat card.\nawait item.roll() \n\n/*\n//But you could do something like this instead of await item.roll() to create your own chat card ! \n\nconst itemDescription = item.data.data.description.value;\nconst itemTitle = `<img src=\"${item.data.img}\" height=\"30\" style=\"border:0px\"><h2>${item.data.name.toUpperCase()}</h2>`;\nChatMessage.create({\n    speaker: ChatMessage.getSpeaker(),\n    flavor: itemTitle + itemDescription\n});\n*/","folder":null,"sort":0,"permission":{"BEL3Iav6K058rvXZ":3},"flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.sb2mEl3FIPiwfoQs"}}}
